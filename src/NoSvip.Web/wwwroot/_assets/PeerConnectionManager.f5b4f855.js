import{c as e}from"./index.87be0468.js";var n,o={all:n=n||new Map,on:function(e,o){var t=n.get(e);t&&t.push(o)||n.set(e,[o])},off:function(e,o){var t=n.get(e);t&&t.splice(t.indexOf(o)>>>0,1)},emit:function(e,o){(n.get(e)||[]).slice().map((function(e){e(o)})),(n.get("*")||[]).slice().map((function(n){n(e,o)}))}};class t{constructor(){this.roomId=null,this.peerConnection=null,this.dataChannel=null,this.initiateConnection=this.initiateConnection.bind(this),this.waitForConnection=this.waitForConnection.bind(this),this.signalingMessageCallback=this.signalingMessageCallback.bind(this),this.setupDataChannel=this.setupDataChannel.bind(this),this.onIceCandidate=this.onIceCandidate.bind(this),this.onDescription=this.onDescription.bind(this),this.onReceiveMessageCallback=this.onReceiveMessageCallback.bind(this),this.sendData=this.sendData.bind(this),this.onChannelOpen=this.onChannelOpen.bind(this),this.onChannelClose=this.onChannelClose.bind(this)}initiateConnection(e){console.log("initiate connection..."),this.roomId=e,this.createRTCConnection(!0)}waitForConnection(e){console.log("waiting for remote description... (offer)"),this.roomId=e,this.createRTCConnection(!1)}createRTCConnection(e){const n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:0.peerjs.com:3478",username:"peerjs",credential:"peerjsp"}]});if(this.peerConnection=n,n.onicecandidate=this.onIceCandidate,e){const e=n.createDataChannel("file-transfer",{ordered:!0});this.setupDataChannel(e),this.createOffer()}else this.peerConnection.ondatachannel=e=>{const n=e.channel||e.target;this.setupDataChannel(n)}}createOffer(){console.log("create offer."),this.peerConnection.createOffer().then(e=>{this.onDescription(e)})}createAnswer(){console.log("create answer."),this.peerConnection.createAnswer().then(e=>{this.onDescription(e)})}setupDataChannel(e){this.dataChannel=e,e.bufferedAmountLowThreshold=262144,e.binaryType="arraybuffer",e.onopen=this.onChannelOpen,e.onclose=this.onChannelClose,e.onerror=this.onChannelError}onDescription(e){this.peerConnection.setLocalDescription(e).then(()=>{this.sendMessage(e)}).catch(e=>console.log("onDescription error: ",e))}onIceCandidate(e){e.candidate&&(console.log("ICE candidate, send to remote:",JSON.stringify(e.candidate)),this.sendMessage({ice:e.candidate}))}onChannelOpen(e){console.log("## channel open: ",e),this.dataChannel.onmessage=this.onReceiveMessageCallback}onChannelClose(e){console.log("## channel close: ",e)}onChannelError(e){console.log("## channel error: ",e)}signalingMessageCallback(e){"offer"===e.type?(console.log("Got offer. Sending answer to peer."),this.peerConnection.setRemoteDescription(new RTCSessionDescription(e)).then(e=>{this.createAnswer()})):"answer"===e.type?(console.log("Got answer."),this.peerConnection.setRemoteDescription(new RTCSessionDescription(e))):e.ice&&(console.log("Got candidate."),this.peerConnection.addIceCandidate(e.ice).catch(e=>{console.log("Failure during addIceCandidate(): "+e.name)}))}onReceiveMessageCallback(){o.emit("onReceiveMessage","hello world!")}sendData(){this.dataChannel.send("hello world!")}sendMessage(n){console.log("Client sending message: ",n),e.invoke("SendMessage",this.roomId,n).catch((function(e){return console.error(e.toString())}))}logError(e){e&&("string"==typeof e?console.warn(e):console.warn(e.toString(),e))}}export{t as P,o as e};
